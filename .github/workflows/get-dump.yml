name: PDF Generator

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  
permissions:
  contents: write
  
jobs:
  generate_pdfs:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install patched wkhtmltopdf version
      - name: Install patched wkhtmltopdf
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq xfonts-75dpi
          wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.bionic_amd64.deb
          sudo apt install -y ./wkhtmltox_0.12.6-1.bionic_amd64.deb
          
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Ensure that the input file exists
      - name: Ensure input file exists
        run: |
          if [ ! -f "./source.txt" ]; then
            echo "Input file not found! Exiting."
            exit 1
          fi
          sed -i '/^$/d' "./source.txt"

      # Step 4: Execute wkhtmltopdf commands with delay and error reporting
      - name: Execute wkhtmltopdf commands with delay and error handling
        run: |
          i=0
          while read line; do
            # Enhanced wkhtmltopdf command with error handling
            wget -q -O - $line | grep -oE "question\s[0-9]+" > ./tmpr
            if [ $? == 0 ] && [ "$(cat ./tmpr|head -n 1  | tr  ' ' '-')" != "" ];then
              fname=$(cat ./tmpr|head -n 1  | tr  ' ' '-').pdf ; 
              echo "file name : $fname ------>"
              cp /dev/null ./report
              if ! bash -c "(echo _______ For line $((++i)) _____; echo 'CMD : wkhtmltopdf --no-stop-slow-scripts --javascript-delay 1000 $line $fname' ; wkhtmltopdf --no-stop-slow-scripts --javascript-delay 1000 $line $fname 2>&1 | tee -a ./report)"; then
                echo "Error occurred: Rerun Line : $((++i))" >> ./report
              fi
              sleep $(shuf -i 3-8 -n 1)
            else 
              echo $line >> ./reprocess ;
              continue;
            fi 
          done < ./source.txt
          grep -i error ./report >> run_report.txt || true
          mv *.pdf q/ || true
          
      # - name: Set output variables
      #   id: vars
      #   run: echo "fcount=$(wc -l source.txt)" >> $GITHUB_OUTPUT
      
      # - name: Generate Readme
      #   run: python readmeGen.py ${{steps.vars.outputs.fcount}}

      # Step 5: Configure git for committing changes
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4.3.0
        with:
          name: upload-pdf
          path: ${{ github.workspace }}/q/*.pdf

      # Step 6: Commit and push the report and any generated files
      - name: Commit and push changes
        if: always()
        run: |
          rm -f wkhtml* report ./tmpr || true
          ls -ltr
          git status
          git add *||true
          git commit -am "Add generated PDFs and report from GitHub Action"
          git push origin main
