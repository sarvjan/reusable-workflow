name: PDF Generator

# on:
#   workflow_dispatch:  # Allows manual triggering of the workflow

on:
  workflow_call:
    inputs:
      config:
        description: 'url list file'
        required: false
        default: "source.txt"
        type: string
  
permissions:
  contents: write
  
jobs:

  generate_pdfs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install patched wkhtmltopdf
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq xfonts-75dpi
          rm *.udeb* *.deb* || true
          wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.bionic_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
          sudo apt install -y ./libssl1.1_1.1.0g-2ubuntu4_amd64.deb
          sudo apt install -y ./wkhtmltox_0.12.6-1.bionic_amd64.deb
          
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Ensure input file exists
        run: |
          if [ ! -f "./${{ inputs.config }}" ]; then
            echo "Input file not found! Exiting."
            exit 1
          fi
          sed '/^$/d' "./${{ inputs.config }}" > "./${{ inputs.config }}"

      - name: Generate readmeGen.py
        run: |
          cat << 'EOF' > readmeGen.py
          import sys
          import math
          
          def generate_readme(max_number):
              # Determine the number of columns based on max_number, with each column accommodating up to 10 questions
              columns = math.ceil(max_number / 10)  # Each column can hold up to 10 questions
          
              # Calculate the number of rows needed based on max_number and the column limit
              rows = min(10, max_number)  # Limit to a maximum of 10 rows for display purposes
          
              readme_content = "## Questions\n"
              readme_content += "|" + " | ".join([""] * columns) + "|\n"  # Empty row for columns
              readme_content += "|" + " | ".join(["-"] * columns) + "|\n"  # Separator row
          
              # Prepare a matrix with a fixed number of rows and a dynamic number of columns
              matrix = [["" for _ in range(columns)] for _ in range(rows)]
              
              # Fill the matrix by columns first
              for i in range(max_number):
                  col = i // rows  # Determine which column to place the question
                  row = i % rows   # Determine the position in the column
                  matrix[row][col] = f"[question-{i + 1}](./q/question-{i + 1}.pdf)"
              
              # Add each row to the markdown content
              for row in matrix:
                  readme_content += "|" + " | ".join(row) + "|\n"
          
              # Save the README.md file
              with open("README.md", "w") as file:
                  file.write(readme_content)
          
          # Example usage:
          if __name__ == "__main__":
              if len(sys.argv) < 2:
                  print("Usage: python readmeGen.py <max_number>")
                  sys.exit(1)
          
              try:
                  max_number = int(sys.argv[1])
                  if max_number < 1:
                      raise ValueError("Input must be a positive integer.")
                  generate_readme(max_number)
              except ValueError as e:
                  print(f"Error: {e}")
                  sys.exit(1)
          EOF

      - name: Execute wkhtmltopdf commands with delay and error handling
        run: |
          echo "Starting in working dir: $(pwd)..."
          cp /dev/null success_download.txt
          cp /dev/null ./report
          echo "line105"
          if ! [ "$(wc -l ./${{ inputs.config }})" == "0" ];then
            echo "line107"
            i=0
            while read line; do
              echo "line110"              
              echo $line
              # Enhanced wkhtmltopdf command with error handling
              wget -q -O - $line | grep -oE "question\s[0-9]+" > ./tmpr

              if [ $? == 0 ] && [ "$(cat ./tmpr|head -n 1  | tr  ' ' '-')" != "" ];then
                
                fname=$(cat ./tmpr|head -n 1  | tr  ' ' '-').pdf ; 
                echo "file name : $fname ------>"
                if ! [ -e "./q/$fname" ];then
                  echo _______ For line $((++i)) _____;
                  echo "CMD : wkhtmltopdf --no-stop-slow-scripts --javascript-delay 1000 $line $fname" ; 
                  wkhtmltopdf --no-stop-slow-scripts --javascript-delay 1000 $line $fname 2>./report || true

                  if [ -f "./$fname" ];then
                    echo "Adding Entry to success_download.txt as file exist in current dir..."
                    echo $line | grep -oE 'view/[0-9]+' | tr -d 'view/' >> success_download.txt
                  fi                  
                  sleep $(shuf -i 3-8 -n 1)
                  
                else
                  # Add to successfully downloaded file if the file already exist under "q" dir
                  echo "Adding Entry to success_download.txt as file exist in \'q\' dir..."
                  echo $line | grep -oE 'view/[0-9]+' | tr -d 'view/' >> success_download.txt
                fi
              else 
                echo $line >> ./reprocess ;
                continue;
              fi 
            done < ./${{ inputs.config }}
            grep -i error ./report >> run_report.txt || true
          fi
          echo "line142"

      - name: Set output variables
        id: vars
        run: |
          mv *.pdf q/ || true
          echo "fcount=$(ls ${GITHUB_WORKSPACE}/q/*.pdf | awk -F '/' '{print $NF}' | sort -n -t- -k2 | tail -n 1 | grep -oE "[0-9]*")" >> $GITHUB_ENV
      
      - name: Generate Readme
        run: python ${GITHUB_WORKSPACE}/readmeGen.py ${fcount:=1}

      - name: Commit and push changes
        id: upload
        if: always()
        run: |
          if [[ -s success_download.txt ]];then
            cat success_download.txt
            for i in $(cat success_download.txt); do sed -i -e "/"${i}"/d" ./source.txt ; done
          fi
          rm -f wkhtml* report ./tmpr readmeGen.py success_download.txt || true
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git status
          git add *||true
          git commit -am "Add generated PDFs and report from GitHub Action"
          git push origin main

